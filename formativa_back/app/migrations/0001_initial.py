# Generated by Django 5.1.7 on 2025-06-12 10:52

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Usuario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('tipo', models.CharField(choices=[('GESTOR', 'Gestor'), ('PROFESSOR', 'Professor')], default='PROFESSOR', help_text='Tipo de usuário (Gestor ou Professor).', max_length=10)),
                ('ni', models.PositiveIntegerField(help_text='Número de identificação único.', unique=True)),
                ('email', models.EmailField(blank=True, help_text='E-mail do usuário.', max_length=254, null=True, unique=True)),
                ('telefone', models.CharField(blank=True, help_text='Telefone no formato +5511999999999.', max_length=15, null=True, validators=[django.core.validators.RegexValidator('^\\+?1?\\d{9,15}$', 'Formato de telefone inválido.')])),
                ('data_nascimento', models.DateField(blank=True, help_text='Data de nascimento do usuário.', null=True)),
                ('data_contratacao', models.DateField(blank=True, help_text='Data de contratação do usuário.', null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Usuário',
                'verbose_name_plural': 'Usuários',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Disciplina',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(help_text='Nome da disciplina.', max_length=100)),
                ('curso', models.CharField(help_text='Curso associado à disciplina.', max_length=100)),
                ('descricao', models.TextField(blank=True, help_text='Descrição da disciplina.', null=True)),
                ('carga_horaria', models.PositiveIntegerField(help_text='Carga horária em horas.')),
                ('professor', models.ForeignKey(blank=True, help_text='Professor responsável pela disciplina.', limit_choices_to={'tipo': 'PROFESSOR'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='disciplinas', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Disciplina',
                'verbose_name_plural': 'Disciplinas',
            },
        ),
        migrations.CreateModel(
            name='Sala',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(help_text='Nome ou identificador da sala.', max_length=100)),
                ('capacidade', models.PositiveIntegerField(help_text='Capacidade máxima da sala.')),
                ('professor_responsavel', models.ForeignKey(blank=True, help_text='Professor responsável pela sala, se aplicável.', limit_choices_to={'tipo': 'PROFESSOR'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='salas', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Sala',
                'verbose_name_plural': 'Salas',
            },
        ),
        migrations.CreateModel(
            name='Reserva',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_inicio', models.DateTimeField(help_text='Data e hora de início da reserva.')),
                ('data_termino', models.DateTimeField(help_text='Data e hora de término da reserva.')),
                ('periodo', models.CharField(choices=[('MANHA', 'Manhã'), ('TARDE', 'Tarde'), ('NOITE', 'Noite')], help_text='Período da reserva (Manhã, Tarde, Noite).', max_length=5)),
                ('disciplina_associada', models.ForeignKey(help_text='Disciplina associada à reserva.', on_delete=django.db.models.deletion.CASCADE, related_name='reservas', to='app.disciplina')),
                ('professor_responsavel', models.ForeignKey(help_text='Professor responsável pela reserva.', limit_choices_to={'tipo': 'PROFESSOR'}, on_delete=django.db.models.deletion.CASCADE, related_name='reservas', to=settings.AUTH_USER_MODEL)),
                ('sala_reservada', models.ForeignKey(help_text='Sala reservada.', on_delete=django.db.models.deletion.CASCADE, related_name='reservas', to='app.sala')),
            ],
            options={
                'verbose_name': 'Reserva',
                'verbose_name_plural': 'Reservas',
            },
        ),
        migrations.AddIndex(
            model_name='usuario',
            index=models.Index(fields=['ni'], name='app_usuario_ni_b83a48_idx'),
        ),
        migrations.AddIndex(
            model_name='reserva',
            index=models.Index(fields=['data_inicio', 'data_termino'], name='app_reserva_data_in_da748e_idx'),
        ),
        migrations.AddIndex(
            model_name='reserva',
            index=models.Index(fields=['sala_reservada'], name='app_reserva_sala_re_ef8cb9_idx'),
        ),
    ]
